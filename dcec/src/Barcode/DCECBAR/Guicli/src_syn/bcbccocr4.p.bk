{mfdeclre.i}
{bcdeclre.i  }
{bcwin02.i}
    {bctitle.i}
DEF VAR bc_id AS CHAR FORMAT "x(18)" LABEL "条码".
DEF VAR bc_part AS CHAR FORMAT "x(18)" LABEL "零件号".
DEF VAR bc_part_desc1 AS CHAR FORMAT "x(20)" LABEL "零件描述".
DEF VAR bc_part_desc2 AS CHAR FORMAT "x(20)".
DEF VAR bc_qty AS DECIMAL FORMAT "->>,>>>,>>9.9" LABEL "数量".
/*DEF VAR bc_pkqty AS DECIMAL FORMAT "->>,>>>,>>9.9" LABEL "数量".*/
DEF VAR bc_qty_std AS DECIMAL FORMAT "->>,>>>,>>9.9" LABEL "标准数量".
DEF VAR bc_lot AS CHAR FORMAT "x(18)" LABEL "批/序号".
DEF VAR bc_split_qty AS DECIMAL FORMAT "->>,>>>,>>9.9" LABEL "拆分数量".
DEF VAR bcprefix AS CHAR.
DEF VAR bc_po_nbr AS CHAR FORMAT "x(8)" LABEL "排程单".
DEFINE BUTTON bc_button LABEL "确认" SIZE 8 BY 1.50.
DEF VAR oktocomt AS LOGICAL.
DEF VAR bc_split_id LIKE bc_id.
DEF VAR bc_site AS CHAR.
DEF VAR bc_loc AS CHAR.
DEF VAR bc_qty_label AS  DECIMAL FORMAT "->>,>>>,>>9.9" LABEL "张数".
DEF VAR ismodi AS LOGICAL.
DEF VAR bc_po_vend AS CHAR FORMAT "x(8)" LABEL '供应商'.
DEF VAR bc_po_vend1 AS CHAR FORMAT "x(8)" LABEL "至".
DEF VAR bc_po_nbr1 AS CHAR FORMAT "x(8)" LABEL "至".
DEF VAR bc_part1 AS CHAR FORMAT 'x(8)' LABEL "至".
DEF VAR bc_rlse_qty AS DECIMAL FORMAT "->>,>>>,>>9.9" LABEL "需求量".
DEF VAR bc_date AS DATE LABEL '日期'.
DEF VAR bc_date1 AS DATE LABEL '至'.
DEF FRAME bc
    bc_po_vend AT ROW 1.2 COL 2.5
    bc_po_vend1  AT ROW 2.4 COL 5.6
    bc_po_nbr AT ROW 3.6 COL 2.5
   
    bc_po_nbr1  AT ROW 4.8 COL 5.6
   
   bc_part AT ROW 6 COL 2.5
   /* bc_po_nbr AT ROW 6.5 COL 2.5*/
    bc_part1 AT ROW 7.2 COL 5.6
  /* bc_pkqty AT ROW 10 COL 4*/
   /* bc_qty_std AT ROW 8 COL 1*/
  
   bc_date AT ROW 8.4 COL 4
   bc_date1 AT ROW 9.6 COL 5.6
    
    WITH SIZE 30 BY 12 TITLE "条码生成-批量" SIDE-LABELS  NO-UNDERLINE THREE-D AT COLUMN 1 ROW 1.
ismodi = NO.
ENABLE bc_po_vend  WITH FRAME bc IN WINDOW c-win.
/*DISABLE bc_part_desc  bc_part_desc1 WITH FRAME bc .*/
 
VIEW c-win.

ON CURSOR-DOWN OF bc_po_vend
DO:
    
       ASSIGN bc_po_vend.
       FIND FIRST vd_mstr NO-LOCK WHERE vd_addr > bc_po_vend NO-ERROR.
       IF AVAILABLE vd_mstr THEN DO:
           ASSIGN bc_po_vend = vd_addr.
           DISPLAY bc_po_vend WITH FRAME bc.
       END.
    
END.

ON CURSOR-UP OF bc_po_vend
DO:
   
       ASSIGN bc_po_vend.
       FIND LAST vd_mstr NO-LOCK WHERE vd_addr < bc_po_vend NO-ERROR.
       IF AVAILABLE vd_mstr THEN DO:
           ASSIGN bc_po_vend = vd_addr.
           DISPLAY bc_po_vend WITH FRAME bc.
       END.
   
END.

ON enter OF bc_po_vend
DO:
    
   
    
   /* IF LASTKEY = KEYCODE("cursor-up") THEN DO:
       
    END.*/
    /*IF LASTKEY = KEYCODE("return") THEN DO:*/
    bc_po_vend = bc_po_vend:SCREEN-VALUE.
    DISABLE bc_po_vend WITH FRAME bc.
    ENABLE bc_po_vend1 WITH FRAME bc.
         
     
      /*bc_lot = bcprefix.
      DISP bc_lot WITH FRAME bc.  
      ENABLE bc_lot WITH FRAME bc.*/
       /* END.*/
   
END.


ON CURSOR-DOWN OF bc_po_vend1
DO:
    
       ASSIGN bc_po_vend1.
       FIND FIRST vd_mstr NO-LOCK WHERE vd_addr > bc_po_vend1 NO-ERROR.
       IF AVAILABLE vd_mstr THEN DO:
           ASSIGN bc_po_vend1 = vd_addr.
           DISPLAY bc_po_vend1 WITH FRAME bc.
       END.
    
END.

ON CURSOR-UP OF bc_po_vend1
DO:
   
       ASSIGN bc_po_vend1.
       FIND LAST vd_mstr NO-LOCK WHERE vd_addr < bc_po_vend1 NO-ERROR.
       IF AVAILABLE vd_mstr THEN DO:
           ASSIGN bc_po_vend1 = vd_addr.
           DISPLAY bc_po_vend1 WITH FRAME bc.
       END.
   
END.

ON enter OF bc_po_vend1
DO:
    
   
    
   /* IF LASTKEY = KEYCODE("cursor-up") THEN DO:
       
    END.*/
    /*IF LASTKEY = KEYCODE("return") THEN DO:*/
    bc_po_vend1 = bc_po_vend1:SCREEN-VALUE.
    DISABLE bc_po_vend1 WITH FRAME bc.
    ENABLE bc_po_nbr WITH FRAME bc.
         
     
      /*bc_lot = bcprefix.
      DISP bc_lot WITH FRAME bc.  
      ENABLE bc_lot WITH FRAME bc.*/
       /* END.*/
   
END.
ON CURSOR-DOWN OF bc_po_nbr
DO:
    
       ASSIGN bc_po_nbr.
       FIND FIRST scx_ref NO-LOCK WHERE scx_type = 2 AND scx_order > bc_po_nbr NO-ERROR.
       IF AVAILABLE scx_ref THEN DO:
           ASSIGN bc_po_nbr = scx_order.
           DISPLAY bc_po_nbr WITH FRAME bc.
       END.
    
END.

ON CURSOR-UP OF bc_po_nbr
DO:
   
       ASSIGN bc_po_nbr.
       FIND LAST scx_ref NO-LOCK WHERE scx_type = 2 AND scx_order < bc_po_nbr NO-ERROR.
       IF AVAILABLE scx_ref THEN DO:
           ASSIGN bc_po_nbr = scx_order.
           DISPLAY bc_po_nbr WITH FRAME bc.
       END.
   
END.
ON enter OF bc_po_nbr
DO:
    bc_po_nbr = bc_po_nbr:SCREEN-VALUE.
    /*{bcrun.i ""bcmgcheck.p"" "(input ""po"",
        input """",
        input """", 
        input """", 
        input """", 
        input """",
         input """", 
        input """", 
        input bc_po_nbr, 
        input """",
         input """", 
        input """",
         input """",
        output success)"}
    IF  NOT success THEN do:
       
       UNDO,RETRY.

    END.
   ELSE DO: */
       DISABLE bc_po_nbr WITH FRAME bc.
       ENABLE bc_part WITH FRAME bc.
 
  /* END.*/
END.



ON CURSOR-DOWN OF bc_po_nbr1
DO:
    
       ASSIGN bc_po_nbr1.
       FIND FIRST scx_ref NO-LOCK WHERE scx_type = 2 AND scx_order > bc_po_nbr1 NO-ERROR.
       IF AVAILABLE scx_ref THEN DO:
           ASSIGN bc_po_nbr1 = scx_order.
           DISPLAY bc_po_nbr1 WITH FRAME bc.
       END.
    
END.

ON CURSOR-UP OF bc_po_nbr1
DO:
   
       ASSIGN bc_po_nbr1.
       FIND LAST scx_ref NO-LOCK WHERE scx_type = 2 AND scx_order < bc_po_nbr1 NO-ERROR.
       IF AVAILABLE scx_ref THEN DO:
           ASSIGN bc_po_nbr1 = scx_order.
           DISPLAY bc_po_nbr1 WITH FRAME bc.
       END.
   
END.
ON enter OF bc_po_nbr1
DO:
    bc_po_nbr = bc_po_nbr1:SCREEN-VALUE.
    /*{bcrun.i ""bcmgcheck.p"" "(input ""po"",
        input """",
        input """", 
        input """", 
        input """", 
        input """",
         input """", 
        input """", 
        input bc_po_nbr, 
        input """",
         input """", 
        input """",
         input """",
        output success)"}
    IF  NOT success THEN do:
       
       UNDO,RETRY.

    END.
   ELSE DO: */
       DISABLE bc_po_nbr1 WITH FRAME bc.
       ENABLE bc_part WITH FRAME bc.
 
  /* END.*/
END.
/*ENABLE bc_part  WITH FRAME bc IN WINDOW c-win.*/
/*DISABLE bc_part_desc  bc_part_desc1 WITH FRAME bc .*/
 

ON CURSOR-DOWN OF bc_part
DO:
    
       ASSIGN bc_part.
       FIND FIRST pt_mstr NO-LOCK WHERE pt_part > bc_part NO-ERROR.
       IF AVAILABLE pt_mstr THEN DO:
           ASSIGN bc_part = pt_part.
           DISPLAY bc_part WITH FRAME bc.
       END.
    
END.

ON CURSOR-UP OF bc_part
DO:
   
       ASSIGN bc_part.
       FIND LAST pt_mstr NO-LOCK WHERE pt_part < bc_part NO-ERROR.
       IF AVAILABLE pt_mstr THEN DO:
           ASSIGN bc_part = pt_part.
           DISPLAY bc_part WITH FRAME bc.
       END.
   
END.

ON enter OF bc_part
DO:
    
   
    
   /* IF LASTKEY = KEYCODE("cursor-up") THEN DO:
       
    END.*/
    /*IF LASTKEY = KEYCODE("return") THEN DO:*/
    bc_part = bc_part:SCREEN-VALUE.
    DISABLE bc_part WITH FRAME bc.
    ENABLE bc_part1 WITH FRAME bc.
         
     
      /*bc_lot = bcprefix.
      DISP bc_lot WITH FRAME bc.  
      ENABLE bc_lot WITH FRAME bc.*/
       /* END.*/
   
END.



ON CURSOR-DOWN OF bc_part1
DO:
    
       ASSIGN bc_part1.
       FIND FIRST pt_mstr NO-LOCK WHERE pt_part > bc_part1 NO-ERROR.
       IF AVAILABLE pt_mstr THEN DO:
           ASSIGN bc_part1 = pt_part.
           DISPLAY bc_part1 WITH FRAME bc.
       END.
    
END.

ON CURSOR-UP OF bc_part1
DO:
   
       ASSIGN bc_part1.
       FIND LAST pt_mstr NO-LOCK WHERE pt_part < bc_part1 NO-ERROR.
       IF AVAILABLE pt_mstr THEN DO:
           ASSIGN bc_part1 = pt_part.
           DISPLAY bc_part1 WITH FRAME bc.
       END.
   
END.

ON enter OF bc_part1
DO:
    
   
    
   /* IF LASTKEY = KEYCODE("cursor-up") THEN DO:
       
    END.*/
    /*IF LASTKEY = KEYCODE("return") THEN DO:*/
    bc_part1 = bc_part1:SCREEN-VALUE.
    DISABLE bc_part1 WITH FRAME bc.
    bc_date = TODAY.
    bc_date1 = TODAY.
    DISP bc_date bc_date1 WITH FRAME bc.
    ENABLE bc_date WITH FRAME bc.
         
     
      /*bc_lot = bcprefix.
      DISP bc_lot WITH FRAME bc.  
      ENABLE bc_lot WITH FRAME bc.*/
       /* END.*/
   
END.


ON enter OF bc_date
DO:
    ASSIGN bc_date.
        DISABLE bc_date WITH FRAME bc.
    ENABLE bc_date1 WITH FRAME bc.
END.
ON enter OF bc_date1
DO:
    ASSIGN bc_date1.
        DISABLE bc_date1 WITH FRAME bc.
    RUN main.
END.



ON WINDOW-CLOSE OF C-Win /* <insert window title> */
DO:
  /* This event will close the window and terminate the procedure.  */
  APPLY "CLOSE":U TO THIS-PROCEDURE.
  RETURN NO-APPLY.
END.

PROCEDURE main:
      DEF VAR b_id LIKE b_co_code.
      DEF VAR m_fmt LIKE b_co_format.
     
      DEF VAR i AS INT.
      IF bc_po_vend1 = '' THEN bc_po_vend1 = hi_char.
      IF bc_po_nbr1 = '' THEN bc_po_nbr1 = hi_char.
      IF bc_part1 = '' THEN bc_part1 = hi_char.
      IF bc_date = ? THEN bc_date = low_date.
      IF bc_date1 = ? THEN bc_date = hi_date.
     
    
     for each scx_ref no-lock
      where scx_type = 2 AND scx_shipfrom >= bc_po_vend AND scx_shipfrom <= bc_po_vend1
         AND scx_order >= bc_po_nbr AND scx_order <= bc_po_nbr1,
      each pod_det no-lock
      where pod_nbr = scx_order and pod_line = scx_line AND pod_stat = "" /* ,
      each po_mstr no-lock
      where po_nbr = pod_nbr AND po_stat = "" */:
        
     FOR EACH sch_mstr no-lock
   where sch_type = 4   AND sch_rlse_id = pod_curr_rlse_id[1]
   and sch_nbr = pod_nbr and sch_line = pod_line:
             
       
         for each schd_det no-lock
    where schd_type = sch_type AND schd_date >= bc_date AND schd_date <= bc_date1 
    and schd_nbr = sch_nbr
    and schd_line = sch_line
    and schd_rlse_id = sch_rlse_id:
             FIND FIRST pt_mstr WHERE pt_part = pod_part NO-LOCK NO-ERROR.
               bc_rlse_qty = schd_discr_qty * (IF pod_um_conv <> 0 THEN pod_um_conv ELSE 1).
                 bc_qty_label = IF pt_ord_mult <> 0 AND bc_rlse_qty MOD pt_ord_mult <> 0 THEN truncate(bc_rlse_qty / pt_ord_mult,0) + 1 ELSE
                 bc_rlse_qty / (IF pt_ord_mult <> 0 THEN pt_ord_mult ELSE 1). 
    bcprefix = SUBSTR(string(YEAR(TODAY),'9999'),3,2) + STRING(MONTH(TODAY),'99') + STRING(DAY(TODAY),'99') + STRING(TIME,'999999') + SUBstr(STRING(etime),LENGTH(STRING(etime)) - 1,2).

     DO i = 1 TO bc_qty_label:
             
                 IF i MOD 1000 = 0 THEN do:
                     PAUSE 1.
                     bcprefix = SUBSTR(string(YEAR(TODAY),'9999'),3,2) + STRING(MONTH(TODAY),'99') + STRING(DAY(TODAY),'99') + STRING(TIME,'999999') + SUBstr(STRING(etime),LENGTH(STRING(etime)) - 1,2).
                 END.
                 b_id = bcprefix + STRING(i MOD 1000 ,'999').
                   
                       bc_id = b_id.
                    /*IF NOT ismodi THEN */ bc_lot =  b_id.
                       
                       CREATE b_co_mstr.
               ASSIGN 
                   b_co_code = b_id
                   b_co_part = pod_part
                   b_co_lot = bc_lot
                  
                  /* b_co_qty_ini = bc_qty*/
                   b_co_qty_cur = IF pt_ord_mult <> 0 THEN pt_ord_mult ELSE 1
                   /*b_co_qty_std = bc_qty_std*/
                   b_co_um = 'ea'
                   b_co_status = 'ac'
                   /*b_co_format = m_fmt*/
                   b_co_userid = g_user
                   b_co_ord = schd_nbr
                   b_co_line = STRING(schd_line)
                   b_co_vend = scx_shipfrom
                   b_co_due_date = schd_date
                   b_co_qty_req = bc_rlse_qty
                   b_co_desc1 = pt_desc1
                       b_co_desc2 = pt_desc2.


               
              /* {bcusrhist.i }*/
                   
/*MESSAGE "是否打印？" SKIP(1)
        "继续?"
        VIEW-AS ALERT-BOX
        QUESTION
        BUTTON YES-NO
        UPDATE oktocomt.*/
 /*IF oktocomt THEN DO:*/
/* FIND FIRST b_usr_mstr WHERE b_usr_usrid = g_user NO-LOCK NO-ERROR.*/
    /*IF b_usr_prt_typ <> 'ipl' AND b_usr_prt_typ <> 'zpl' THEN DO:
    MESSAGE '本系统暂不支持除了ipl,zpl类型的条码打印机!' VIEW-AS ALERT-BOX ERROR.

        LEAVE.*/
       /* END.*/
 /*OUTPUT TO VALUE(b_usr_printer).*/

 {bclabel.i ""zpl"" ""part"" "b_co_code" "b_co_part" 
     "b_co_lot" "b_co_ref" "b_co_qty_cur" "b_co_vend"}
     
     
     
     
   
     
     
     END.
        
        
         END.
     END.
     END.
      RELEASE b_co_mstr.
      RELEASE b_po_wkfl.
     ENABLE bc_po_vend WITH FRAME bc.
               END.


{bctrail.i}
