/* xxbcrp003.p 备料明细检查&销售出货                                       */
/* REVISION: 1.0         Last Modified: 2008/10/27   By: Roger   NO ECO    */ 
/*-Revision end------------------------------------------------------------*/


{mfdtitle.i "2+ "}


define variable xapplication as com-handle. /*for excel*/  
define variable xworkbook as com-handle.    /*for excel*/  
define variable xworksheet as com-handle.   /*for excel*/  
define variable x_row as integer init 1.    /*for excel*/  
define variable x_col as integer init 1.    /*for excel*/  


define var nbr  as char format "x(8)" .
define var nbr1  as char format "x(8)" .
define var ship_to as char format "x(8)"  .
define var v_diff as logical  .
define var v_due_date as date .  v_due_date = today .



define var v_curr1 as char.        /*for兑换率check*/
define var v_curr2 as char.        /*for兑换率check*/
define var v_ratetype as char .    /*for兑换率check*/
define var v_effdate as date .     /*for兑换率check*/
define var r1 like exr_rate .      /*for兑换率check*/
define var r2 like exr_rate2.      /*for兑换率check*/
define var seq as integer .        /*for兑换率check*/
define var error as integer .      /*for兑换率check*/

define var v_err1 as logical . /*是否显示 计划单上无库存的 备料差异*/
define var v_err2 as logical . /*是否显示 计划单上无库存的 备料差异*/
define var v_err3 as logical .

define var vv_user as char format "x(12)" .   /*for xxlock01.i*/
define var vv_recid as integer .              /*for xxlock01.i*/
define var v_error as logical .
define var v_file as char format "x(45)" .
define var v_yn as logical  .
define var v_ii as integer .
define var v_qty_pk like ld_qty_oh .
define var v_qty_lad like ld_qty_oh .
define var v_qty_ld like ld_qty_oh .

define temp-table temp1 /*计划单/实际备料数据汇总表*/
    field t1_shipto   like so_ship 
    field t1_sonbr    like so_nbr
    field t1_soline   like sod_line
    field t1_due_date like sod_due_Date
    field t1_part     like sod_part 
    field t1_um_conv  like sod_um_conv
    field t1_qty_open like sod_qty_ord
    field t1_qty_all  like sod_qty_ord 
    field t1_site     like ld_site
    field t1_loc      like ld_loc
    field t1_lot      like ld_lot 
    field t1_qty_oh   like sod_qty_ord
    field t1_qty_shp  like sod_qty_ord
    field t1_qty_pk   like sod_qty_ord
    field t1_stat     like sod_stat
    field t1_rmks     like so_rmks
    .

define temp-table temp2 /*涉及到的SO/line*/
    field t2_sonbr   like sod_nbr
    field t2_soline  like sod_line  .


define temp-table temp3 /*涉及到的SO/line的所有库存备料明细*/
    field t3_sonbr  like lad_nbr
    field t3_soline like lad_line
    field t3_part   like lad_part
    field t3_site   like lad_site 
    field t3_loc    like lad_loc
    field t3_lot    like lad_lot
    field t3_ref    like lad_ref 
    field t3_qty_all like lad_qty_all
    field t3_qty_shp like lad_qty_all 
    .

define temp-table tt field tt_rec as recid .


/*GUI preprocessor Frame A define A*/
&SCOPED-DEFINE PP_FRAME_NAME 

FORM  
    RECT-FRAME       AT ROW 1.4 COLUMN 1.25
    RECT-FRAME-LABEL AT ROW 1   COLUMN 3 NO-LABEL
    SKIP(.1)  

    nbr         colon 18 label "计划单号"
    ship_to     colon 18 label "交运地"
    v_due_Date  colon 18 label "生效日期"
    v_diff      colon 18 label "仅差异数据"
    
    SKIP(4)  
with frame a side-labels width 80 NO-BOX THREE-D .

DEFINE VARIABLE F-a-title AS CHARACTER.
F-a-title = "".
RECT-FRAME-LABEL:SCREEN-VALUE in frame a = F-a-title.
RECT-FRAME-LABEL:WIDTH-PIXELS in frame a =
FONT-TABLE:GET-TEXT-WIDTH-PIXELS(
RECT-FRAME-LABEL:SCREEN-VALUE in frame a + " ", RECT-FRAME-LABEL:FONT).
RECT-FRAME:HEIGHT-PIXELS in frame a =
FRAME a:HEIGHT-PIXELS - RECT-FRAME:Y in frame a - 2.
RECT-FRAME:WIDTH-CHARS IN FRAME a = FRAME a:WIDTH-CHARS - .5. 

/*GUI preprocessor Frame A undefine */
&UNDEFINE PP_FRAME_NAME


/*setFrameLabels(frame a:handle).*/

view frame a .

{wbrp01.i}
mainloop:
repeat: 
    for each temp1 : delete temp1 .  end.
    for each temp2 : delete temp2 .  end.
    for each temp3 : delete temp3 .  end.
    for each tt : delete tt . end .

    clear frame a no-pause .
    batchrun = no . /*cimload的时候会改成yes,这里要改回来*/

    update nbr v_due_date v_diff with frame a editing:
        if frame-field = "nbr" then do:
            {mfnp11.i xpk_mstr xpk_nbr2 xpk_nbr "input nbr" }
            if recno <> ?  then do:
                disp xpk_nbr @ nbr xpk_shipto @ ship_to
                with frame a.
            end.             
        end.
        /*else if frame-field = "ship_to" then do:
            {mfnp.i ad_mstr ship_to ad_addr ship_to ad_addr ad_addr}
            if recno <> ?  then do:
                disp ad_addr @ ship_to 
                with frame a.
            end. 
        end.*/
        else do:
                   status input ststatus.
                   readkey.
                   apply lastkey.
        end.
    end. /*update nbr*/
    assign nbr v_due_date v_diff  .


    if nbr = "" or (nbr <> "" and not can-find(first xpk_mstr where xpk_nbr = nbr no-lock)) then do:
        message "无效计划单" view-as alert-box .
        undo,retry.
    end.

    find first xpk_mstr where xpk_nbr = nbr exclusive-lock no-error .
    if avail xpk_mstr then do:
        ship_to = xpk_shipto .
    end.
    disp ship_to nbr with frame a .

    if v_due_date = ? then do:
        message "    生效日期不允许空,请重新输入!      " view-as alert-box.
        undo,retry .
    end.
    
    define variable apass as char format "x(1)" init "".
    define var v_entity like glcd_entity  .
    find first si_mstr where si_site = xpk_site no-lock no-error.
    v_entity = if avail si_mstr then si_entity else ""  .
    {xxglef01.i  &entity ="v_entity" &effdate="v_due_date" &module=""IC""}
    if apass = "N" then do:
        message "    系统尚未开账,请确认!      " view-as alert-box.
        undo,retry .
    end.



    if ship_to = "" or (ship_to <> "" and not can-find(first ad_mstr where ad_addr = ship_to no-lock)) then do:
        message "无效交运地" view-as alert-box .
        undo,retry.
    end.

    run selectall .
    run printall .
    /* run checkall . */
    find first xpk_mstr where xpk_nbr = nbr and xpk_stat = "" no-lock no-error.
    if avail xpk_mstr then do:
        v_yn = no .
        message "      未全部完成备料!     " skip "     是否取消未备料项次,并继续出货?   " view-as alert-box buttons yes-no update v_yn .
        if v_yn = no then  undo,retry .
        else do:
            for each xpk_mstr where xpk_nbr = nbr and xpk_stat = "" :
                xpk_stat = "A" .
            end.
        end.
    end. /*xpk_stat = ""*/
    
    find first xpk_mstr where xpk_nbr = nbr and xpk_stat = "C" no-lock no-error.
    if avail xpk_mstr then do:
        find first xpk_mstr where xpk_nbr = nbr and xpk_stat <> "C" no-lock no-error.
        if not avail xpk_mstr then do:
            message "警告:已结的计划单.".
                v_yn = no .
                for each temp2 :
                    find first sod_det where sod_nbr = t2_sonbr and sod_line = t2_soline no-lock no-error .
                    if avail sod_det and sod_qty_inv <> 0 then v_yn = yes .
                    if v_yn then leave .
                end.
                if v_yn then message "警告:已结的计划单,且存在'已出货未过账'的订单/项." view-as alert-box.
            undo,retry .
        end.
    end. /*xpk_stat = "C"*/

    for each temp2 break by t2_sonbr by t2_soline :
        if first-of(t2_sonbr) then do:
                find first so_mstr where so_nbr = t2_sonbr no-lock no-error .
                
                v_curr1 = if avail so_mstr then so_curr else "" .
                v_curr2 = base_curr .
                v_effdate = v_due_date  .
                v_ratetype = "" .
                error = 0 .
                if v_curr1 <> v_curr2 then do:	
                        {gprunp.i "mcpl" "p" "mc-create-ex-rate-usage"
                            "(input v_curr1,
                              input v_curr2,
                              input v_ratetype ,
                              input v_effdate ,
                              output r1,
                              output r2,
                              output seq,
                              output error)" }
                    if error <> 0 then do:
                        message "兑换率不存在,订单:" t2_sonbr "  /币别:" v_curr1 view-as alert-box.
                        undo mainloop,retry mainloop .
                    end.     
                end.            
        end.
    end. /*检查兑换率*/

    find first xpk_mstr where xpk_nbr = nbr and xpk_stat = "A" no-lock no-error.
    if avail xpk_mstr then do: /*检查数据是否OK*/

            for each temp2 no-lock:
                
                for each xpkd_det 
                    where xpkd_nbr = nbr 
                    and xpkd_sonbr = t2_sonbr 
                    and xpkd_soline = t2_soline 
                    no-lock break by xpkd_part by xpkd_loc by xpkd_lot :

                    find first xpk_mstr 
                        where xpk_sonbr = xpkd_sonbr 
                        and xpk_soline  = xpkd_soline 
                        and xpk_part    = xpkd_part 
                        and xpk_lot     = xpkd_lot 
                        and xpk_loc     = xpkd_loc 
                    no-lock no-error .
                    if not avail xpk_mstr then do:
                        find first xpk_mstr 
                            where xpk_sonbr = xpkd_sonbr 
                            and xpk_soline  = xpkd_soline 
                            and xpk_part    = xpkd_part  
                            and xpk_loc     = "**无可用库存**"
                        no-lock no-error .
                    end. 
                    if avail xpk_mstr and xpk_stat = "C" then next .

                    if first-of(xpkd_lot) then do:
                        v_qty_pk = 0 .
                    end.
                    v_qty_pk = v_qty_pk + xpkd_qty_pk .
                    if last-of(xpkd_lot) then do:
                        v_qty_lad = 0 .
                        for each lad_det 
                            where lad_dataset = 'sod_det' 
                            and lad_nbr = xpkd_sonbr 
                            and lad_line = string(xpkd_soline) 
                            and lad_part = xpkd_part
                            and lad_site = xpkd_site
                            and lad_loc  = xpkd_loc
                            and lad_lot  = xpkd_lot 
                            no-lock :
                            v_qty_lad = v_qty_lad + lad_qty_pick .
                        end.
                        
                        /*lad >= pk, 正常*/
                        if v_qty_lad < v_qty_pk then do:
                            message "(7.1.6)备料数有误," skip 
                                    "订单/项:"xpkd_sonbr "/" xpkd_soline skip
                                    "料号/批/库位:"xpkd_part "/" xpkd_lot "/" xpkd_loc skip
                                    "备料数:" v_qty_lad 
                            view-as alert-box.
                            undo,retry .
                        end.

                        v_qty_ld = 0 .
                        for each ld_det 
                            where ld_site = xpkd_site
                            and ld_part = xpkd_part
                            and ld_loc  = xpkd_loc
                            and ld_lot  = xpkd_lot 
                            no-lock :
                            v_qty_ld = v_qty_ld + ld_qty_oh .
                        end.

                        if v_qty_ld < v_qty_pk then do:
                            message "系统库存不足," skip 
                                    "订单/项:"xpkd_sonbr "/" xpkd_soline skip
                                    "料号/批/库位:"xpkd_part "/" xpkd_lot "/" xpkd_loc skip
                                    "现有库存:" v_qty_ld 
                            view-as alert-box.
                            undo,retry.
                        end.

                    end. /*if last-of(xpkd_lot)*/
                end. /*for each xpkd_det*/            
            end. /*for each temp2*/
    end.  /*检查数据是否OK*/

    find first xpk_mstr where xpk_nbr = nbr and xpk_stat = "A" no-lock no-error.
    if avail xpk_mstr then do: /*已备料,未出货*/
        message "正在锁定相关订单记录..." .
        for each temp2:
            find first sod_det where sod_nbr = t2_sonbr and sod_line = t2_soline no-lock no-error .
            if avail sod_det and sod_qty_inv <> 0 then 
                message "警告:存在'已出货未过账'的订单/项:" t2_sonbr "/" t2_soline view-as alert-box.
            {xxlock01.i  
                &file-name      = sod_det use-index sod_nbrln 
                &group-criteria = "sod_det.sod_nbr = t2_sonbr and sod_line = t2_soline "
                &undo-block     = "mainloop"
                &retry          = "retry mainloop"
            } 
            {xxlock01.i  
                &file-name      = so_mstr use-index so_nbr 
                &group-criteria = "so_mstr.so_nbr = t2_sonbr "
                &undo-block     = "mainloop"
                &retry          = "retry mainloop"
            } 
            {xxlock01.i  
                &file-name      = lad_det use-index lad_det 
                &group-criteria = "lad_det.lad_dataset = 'sod_det' and lad_nbr = t2_sonbr and lad_line = string(t2_soline)"
                &undo-block     = "mainloop"
                &retry          = "retry mainloop"
            } 
        end.

        message "正在锁定相关库存记录..." .
        for each temp2,
            each lad_det where lad_dataset = 'sod_det' and lad_nbr = t2_sonbr and lad_line = string(t2_soline) :

            find first ld_det where ld_site = lad_site and ld_loc = lad_loc and ld_part = lad_part and ld_lot = lad_lot and ld_ref = lad_ref no-lock no-error .
            if not avail ld_det then do:
                message "库存记录不存在:" lad_part "/" lad_site "/" lad_loc "/" lad_lot "/" lad_ref view-as alert-box.
                undo,retry .
            end.
            else do:
                if ld_qty_oh < (lad_qty_all + lad_qty_pick ) then do:
                    message "库存不足:" lad_part "/" lad_site "/" lad_loc "/" lad_lot "/" lad_ref skip 
                            "库存数:" ld_qty_oh " 备料数:" (lad_qty_all + lad_qty_pick ) 
                    view-as alert-box.
                    undo,retry .
                end.
            end.

            find first temp3 
                where t3_sonbr  = lad_nbr     
                  and t3_soline = lad_line    
                  and t3_part   = lad_part    
                  and t3_site   = lad_site    
                  and t3_loc    = lad_loc     
                  and t3_lot    = lad_lot     
                  and t3_ref    = lad_ref    
            no-error.
            if not avail temp3 then do:
                create temp3 .
                assign 
                       t3_sonbr  = lad_nbr  
                       t3_soline = lad_line 
                       t3_part   = lad_part 
                       t3_site   = lad_site 
                       t3_loc    = lad_loc  
                       t3_lot    = lad_lot  
                       t3_ref    = lad_ref                        
                       t3_qty_all =  lad_qty_all + lad_qty_pick .
            end.

            {xxlock01.i  
                &file-name      = ld_det use-index ld_loc_p_lot 
                &group-criteria = "ld_site = lad_site and ld_loc = lad_loc and ld_part = lad_part and ld_lot = lad_lot and ld_ref = lad_ref "
                &undo-block     = "mainloop"
                &retry          = "retry mainloop"
            } 
        end.

    end. /*xpk_stat = "A":已备料,未出货*/
    message "  " .
    message "  " .
    run updateall.


end. /* mainloop */
{wbrp04.i &frame-spec = a}


procedure selectall : 
do on error undo,leave on endkey undo, leave:
    
    
    for each xpkd_det no-lock 
        where xpkd_shipto = ship_to
        and xpkd_nbr = nbr   :

            find first temp1 
                where t1_sonbr = xpkd_sonbr 
                and t1_soline = xpkd_soline 
                and t1_site   = xpkd_site 
                and t1_loc    = xpkd_loc 
                and t1_lot    = xpkd_lot
            no-error.
            if not avail temp1 then do:
                find first xpk_mstr
                    where xpk_nbr = xpkd_nbr
                    and xpk_sonbr = xpkd_sonbr
                    and xpk_soline = xpkd_soline
                    and xpk_site   = xpkd_site
                    and xpk_lot    = xpkd_lot
                    and xpk_loc    = xpkd_loc
                no-lock no-error .
                if not avail xpk_mstr then do:
                        find first xpk_mstr
                            where xpk_nbr = xpkd_nbr
                            and xpk_sonbr = xpkd_sonbr
                            and xpk_soline = xpkd_soline
                        no-lock no-error .
                end.

                if avail xpk_mstr then do:
                    find first temp2 where t2_sonbr = xpkd_sonbr and t2_soline = xpkd_soline no-error .
                    if not avail temp2 then do:
                        create temp2 . assign t2_sonbr = xpkd_sonbr t2_soline = xpkd_soline .
                    end .
                    find first sod_det where sod_nbr = xpkd_sonbr and sod_line = xpkd_soline no-lock no-error .
                    find first so_mstr where so_nbr = xpkd_sonbr no-lock no-error .

                    create temp1.
                    assign  t1_shipto   = ship_to
                            t1_sonbr    = xpkd_sonbr
                            t1_soline   = xpkd_soline
                            t1_um_conv  = if avail sod_Det then sod_um_conv else 1
                                t1_rmks = if avail so_mstr then so_rmks else "" 
                                t1_due_date = xpk_due_date
                                t1_qty_open = xpk_qty_open
                                t1_stat     = xpk_stat
                                t1_qty_all  = xpk_qty_all
                                t1_qty_oh   = if (xpk_site = xpkd_site and xpk_lot = xpkd_lot and xpk_loc = xpkd_loc) then xpk_qty_oh else 0 
                                t1_qty_shp  = if (xpk_site = xpkd_site and xpk_lot = xpkd_lot and xpk_loc = xpkd_loc) then xpk_qty_shp else 0 
                            t1_site     = xpkd_site
                            t1_loc      = xpkd_loc
                            t1_lot      = xpkd_lot
                            t1_part     = xpkd_part
                            t1_qty_pk   = xpkd_qty_pk .
                end.
            end.
            else do:
                t1_qty_pk = t1_qty_pk + xpkd_qty_pk .
            end.
    end. /*for each xpkd_det*/

    for each xpk_mstr 
        where xpk_shipto = ship_to 
        and xpk_nbr = nbr
        and (not can-find(first xpkd_det 
                    where xpkd_nbr = xpk_nbr 
                    and xpkd_sonbr = xpk_sonbr 
                    and xpkd_soline = xpk_soline 
                    and xpkd_site   = xpk_site
                    and xpkd_lot    = xpk_lot
                    and xpkd_loc    = xpk_loc)
            )
       no-lock:
       
            find first temp1 
                where t1_sonbr = xpk_sonbr 
                and t1_soline = xpk_soline 
                and t1_site   = xpk_site 
                and t1_loc    = xpk_loc 
                and t1_lot    = xpk_lot
            no-error.
            if not avail temp1 then do:
                    find first temp2 where t2_sonbr = xpk_sonbr and t2_soline = xpk_soline no-error .
                        if not avail temp2 then do:
                        create temp2 . assign t2_sonbr = xpk_sonbr t2_soline = xpk_soline .
                    end .
                    find first sod_det where sod_nbr = xpk_sonbr and sod_line = xpkd_soline no-lock no-error .
                    find first so_mstr where so_nbr = xpk_sonbr no-lock no-error .

                    create temp1.
                    assign  t1_shipto   = ship_to
                            t1_sonbr    = xpk_sonbr
                            t1_soline   = xpk_soline
                            t1_um_conv  = if avail sod_Det then sod_um_conv else 1
                                t1_rmks = if avail so_mstr then so_rmks else "" 
                                t1_due_date = xpk_due_date
                                t1_qty_open = xpk_qty_open
                                t1_stat     = xpk_stat
                                t1_qty_all  = xpk_qty_all
                                t1_qty_oh   = xpk_qty_oh
                                t1_qty_shp  = xpk_qty_shp
                            t1_site     = xpk_site
                            t1_loc      = xpk_loc
                            t1_lot      = xpk_lot
                            t1_part     = xpk_part
                            .
            end. 
    end. /*for each xpk_mst*/    
end. 
end procedure. /*selectall*/

procedure updateall : 
do on error undo,leave on endkey undo, leave :
    v_yn = no.
    {pxmsg.i &msgnum=32 &errorlevel=1 &confirm=v_yn } /* 请确认更新 */
    if v_yn then do: 
    
            cimloop:
            do transaction on error undo,leave on endkey undo, leave :
                    /*产生cimload文件*/
                    v_file = "c:\soi" + string(year(today),"9999") + string(month(today)) + string(day(today)) + string(time) + string(random(1,99),"99") .
                    output to value(v_file + ".i" ) .
                        for each temp1 
                            where t1_qty_pk <> 0 and t1_stat <> "C"
                            break by t1_shipto by t1_part by t1_due_date by t1_sonbr by t1_soline 
                            by t1_site by t1_lot by t1_loc :
                            
                            put unformatted t1_sonbr  "  " v_due_date "  N N   " t1_site skip .    
                            put unformatted t1_soline " N " skip.   
                            put unformatted (t1_qty_pk / t1_um_conv)  "  "  t1_site "  " t1_loc "  " t1_lot " -  N  " skip .   
                            put unformatted "." skip   .  
                            put unformatted "Y" skip    . 
                            put unformatted "Y" skip    . 
                            put unformatted " -  -  -  -  -  -   N" skip    . 
                            put unformatted " -  -  -  -  -  -  - " skip    . 
                        end.    
                    output close  .


                    /*取得tr_hist记录ID*/
                    on create of tr_hist do:
                        find first tt where tt_rec = recid(tr_hist) no-lock no-error.
                        if not available tt then do:
                            create tt. tt_rec = recid(tr_hist).
                        end.
                    end.

                    /*执行cimload*/
                    batchrun = yes.
                    input from value ( v_file + ".i") .
                    output to  value ( v_file + ".o") .
                            {gprun.i ""sosois.p""}
                    input close.
                    output close.

                    /*检查错误*/
                    run errorlog .
                    if v_error then leave .
                    
                    
                    /*取消已备料数量*/
                    for each tt:
                        find tr_hist where recid(tr_hist) = tt_rec and tr_type = "iss-so" no-error .
                        if avail tr_hist then do:
                            tr__chr15 = nbr . /*记录出货计划单号*/
                            find first temp3 
                                where t3_sonbr  = tr_nbr     
                                  and t3_soline = string(tr_line)    
                                  and t3_part   = tr_part    
                                  and t3_site   = tr_site    
                                  and t3_loc    = tr_loc     
                                  and t3_lot    = tr_serial     
                                  and t3_ref    = tr_ref    
                            no-error.
                            if avail temp3 then do:
                                assign t3_qty_shp = - tr_qty_loc.
                            end.
                        end.
                    end.   
                    
                    /*备料信息写回系统备料表*/
                    for each temp3 /*where t3_qty_all > t3_qty_shp*/   :
                        v_file = "c:\soa" + string(year(today),"9999") + string(month(today)) + string(day(today)) + string(time) + string(random(1,99),"99") .
                        output to value(v_file + ".i" ) .
                            put unformatted t3_sonbr "  " t3_site skip .   
                            put unformatted "N Y - N" format "x(50)" skip.
                            put unformatted t3_soline skip. 
                            put UNFORMATTED "0 0 Y" skip.
                            put unformatted t3_loc "  " t3_lot "  - "  skip .   
                            put unformatted " - " max(0,t3_qty_all - t3_qty_shp) skip     .
                            put unformatted "." skip .
                            put unformatted "." skip.
                        output close .

                        /*执行cimload*/
                        batchrun = yes.
                        input from value ( v_file + ".i") .
                        output to  value ( v_file + ".o") .
                                {gprun.i ""sosoal.p""}
                        input close.
                        output close.

                        /*检查错误*/
                        run errorlog .
                        if v_error then leave .
                    end. /*for each temp3*/

                    if v_error then leave .

                    for each xpk_mstr where xpk_nbr = nbr  :
                         assign xpk_stat = "C" .            
                    end.

                    for each xpkd_det where xpkd_nbr = nbr  :
                        assign xpkd_ship_date = today xpkd_ship_time = time xpkd_user2 = global_userid  .            
                    end.


                    /*计划单按项次关闭*
                    for each xpk_mstr where xpk_nbr = nbr  :
                        find first temp1 
                            where t1_sonbr = xpk_sonbr
                            and t1_soline  = xpk_soline 
                            and t1_qty_pk <> 0 
                            and t1_stat <> "C"
                        no-lock no-error .
                        if avail temp1 then assign xpk_stat = "C" .            
                    end.

                    for each xpkd_det where xpkd_nbr = nbr  :
                        find first temp1 
                            where t1_sonbr = xpkd_sonbr
                            and t1_soline  = xpkd_soline 
                            and t1_qty_pk <> 0 
                            and t1_stat <> "C"
                        no-lock no-error .
                        if avail temp1 then 
                        assign xpkd_ship_date = today xpkd_ship_time = time xpkd_user2 = global_userid  .            
                    end.
                    */
            end. /*cimloop:*/    

    end. /*if v_yn then*/
end. 
end procedure. /*updateall*/

procedure errorlog :
define var v_fileline as char format "x(80)".
v_error = no .
input from value(v_file + ".o").
    repeat while true:
        import unformatted v_fileline.
        if index(v_fileline,"错误") <> 0 
           or index(v_fileline,"ERROR") <> 0 
        then do:
            output to  value ( "c:\cim-error-log.txt") append.
                put  unformatted 
                     "日期:" string(year(today),"9999") + string(month(today)) + string(day(today)) 
                     "   时间:" string(time,"hh:mm:ss") 
                     "   文件I:" string(v_file + ".i") 
                     "   文件O:" string(v_file + ".o") 
                     "   错误信息:" v_fileline 
                skip.
            output close .
            if v_error = no then v_error = yes .
        end.
    end.
input close.

if v_error = no then do:
    /**/
    os-delete value(v_file + ".i") .
    os-delete value(v_file + ".o") .
end.
else do:
    message "执行报错,请参见c:\cim-error-log.txt" view-as alert-box.
end.

end procedure. /*errorlog*/



procedure printall : 
do on error undo,leave on endkey undo, leave:
    
    create "excel.application" xapplication.
    xworkbook = xapplication:workbooks:add().
    xworksheet = xapplication:sheets:item(1).  
    x_row = 1.
    x_col = 1.
    xworksheet:range("A":u + string(x_row) + ":n":u + STRING(X_row)):select.
    xworksheet:range("A":u + string(x_row) + ":n":u + STRING(X_row)):merge.
    xworksheet:range("A":u + string(x_row)):value = "计划单/实际备料比对表". 
    xworksheet:range("A":u + string(x_row)):HorizontalAlignment = 3 .
    xworksheet:range("a1"):Font:Bold = True .
    xworksheet:range("a1"):font:size=20 .
    xworksheet:Rows(x_row):EntireRow:AutoFit . 
    
    x_row = 2.
    x_col = 1.
    xworksheet:range("A":u + string(x_row) + ":n":u + STRING(X_row)):select.
    xworksheet:range("A":u + string(x_row) + ":n":u + STRING(X_row)):merge.
    xworksheet:range("a2") = "计划单号:" + nbr 
                            + "    交运地:" + ship_to 
                            + "    打印日期:" + string(year(today),"9999") + "-" 
                                              + string(month(today),'99') + "-" 
                                              + string(day(today),'99') .   

    x_row = 3.
    x_col = 1.
    xworksheet:cells(x_row,x_col) = "采购单".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "订单".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "项".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "到期日".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "零件编号".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "未备料".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "预出货量".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "地点".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "库位".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "批号".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "可用库存".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "预备料数".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "实际备料数".
    x_col = x_col + 1.
    xworksheet:cells(x_row,x_col) = "差异".

    xworksheet:Rows("2:3"):Font:Bold = True .


  
    v_ii = x_row . /*表格开始行,用来加框线*/

    find first ad_mstr where ad_addr = ship_to no-lock no-error .
    if avail ad_mstr then do:
        if ad_ctry = "us" then do:
            for each temp1 
                    break by t1_shipto 
                    by substring(t1_rmks,max(1,length(t1_rmks) - 6) ) /*SBUPO*/ 
                    by t1_site  by t1_loc by t1_part 
                    by t1_due_date by t1_sonbr by t1_soline by t1_lot:

                    v_err1 = yes .  /*计划单上无库存的 备料: -- 是否尚未开始备料? */
                    v_err2 = yes .  /*计划单上备料: -- 已开始备料,但未备料ok?*/
                    find first xpk_mstr where xpk_nbr = nbr and xpk_sonbr = t1_sonbr and xpk_soline = t1_soline and xpk_loc = "**无可用库存**" no-lock no-error .
                    if avail xpk_mstr then do:

                        v_qty_pk = 0.
                        for each xpkd_det where xpkd_nbr = xpk_nbr and xpkd_sonbr = xpk_sonbr and xpkd_soline = xpk_soline no-lock :
                            v_qty_pk = v_qty_pk + xpkd_qty_pk .
                        end.
                        if v_qty_pk = 0 then assign v_err1 = yes v_err2 = no .
                        else assign v_err1 = no v_err2 = yes .
                        if v_qty_pk = t1_qty_all then v_err2  = no .   /*当实际备料数=原始需求数时不显示: v_err2 = no*/             
                    end.
                    else do:
                        v_err1 = no .
                        v_err2 = yes .  /*找不到,就是开始有库存的,也显示差异*/
                    end.

                    if v_diff = yes 
                        and (
                        (t1_qty_shp = t1_qty_pk and t1_qty_pk <> 0 ) 
                        or    (t1_qty_shp <> t1_qty_pk and v_err2 = no )
                            ) 
                    then next . /*仅显示差异时,无差异的不显示*/

                    if v_err1 = no and t1_loc = "**无可用库存**" then next .  /*当实际备料数=原始需求数时:不显示*/

                    v_err3 = no .
                    if t1_loc = "**无可用库存**" then v_err3 = yes .
                    if t1_loc <> "**无可用库存**" and t1_qty_shp <> t1_qty_pk then do:
                        if v_err2 = yes then v_err3 = yes .
                    end.

                    x_row = x_row + 1.
                    x_col = 1.
                    xworksheet:cells(x_row,x_col) = "'" + substring(t1_rmks,max(1,length(t1_rmks) - 6) ) /*SBUPO*/ .
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_sonbr .
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) =  t1_soline .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  string(year(t1_due_date),"9999") + "-" + string(month(t1_due_date)) + "-" + string(day(t1_due_date)) .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_part .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_open .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_all .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_site  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_loc   .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_lot  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_oh  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_shp  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_pk  .     
                    x_col = x_col + 1.            
                    xworksheet:cells(x_row,x_col) = if v_err3 = yes then "***" else ""   .     

            end. /*for each temp1*/
        end. /*if ad_ctry = "us"*/
        else do:  /*if ad_ctry <> "us"*/
            for each temp1 
                    break by t1_shipto 
                    by t1_site  by t1_loc by t1_part 
                    by t1_due_date by t1_sonbr by t1_soline by t1_lot:

                    v_err1 = yes .  /*计划单上无库存的 备料: -- 是否尚未开始备料? */
                    v_err2 = yes .  /*计划单上备料: -- 已开始备料,但未备料ok?*/
                    find first xpk_mstr where xpk_nbr = nbr and xpk_sonbr = t1_sonbr and xpk_soline = t1_soline and xpk_loc = "**无可用库存**" no-lock no-error .
                    if avail xpk_mstr then do:

                        v_qty_pk = 0.
                        for each xpkd_det where xpkd_nbr = xpk_nbr and xpkd_sonbr = xpk_sonbr and xpkd_soline = xpk_soline no-lock :
                            v_qty_pk = v_qty_pk + xpkd_qty_pk .
                        end.
                        if v_qty_pk = 0 then assign v_err1 = yes v_err2 = no .
                        else assign v_err1 = no v_err2 = yes .
                        if v_qty_pk = t1_qty_all then v_err2  = no .   /*当实际备料数=原始需求数时不显示: v_err2 = no*/             
                    end.
                    else do:
                        v_err1 = no .
                        v_err2 = yes .  /*找不到,就是开始有库存的,也显示差异*/
                    end.

                    if v_diff = yes 
                        and (
                        (t1_qty_shp = t1_qty_pk and t1_qty_pk <> 0 ) 
                        or    (t1_qty_shp <> t1_qty_pk and v_err2 = no )
                            ) 
                    then next . /*仅显示差异时,无差异的不显示*/

                    if v_err1 = no and t1_loc = "**无可用库存**" then next .  /*当实际备料数=原始需求数时:不显示*/

                    v_err3 = no .
                    if t1_loc = "**无可用库存**" then v_err3 = yes .
                    if t1_loc <> "**无可用库存**" and t1_qty_shp <> t1_qty_pk then do:
                        if v_err2 = yes then v_err3 = yes .
                    end.

                    x_row = x_row + 1.
                    x_col = 1.
                    xworksheet:cells(x_row,x_col) = "'" + substring(t1_rmks,max(1,length(t1_rmks) - 9) ) /*SBUPO*/ .
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_sonbr .
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) =  t1_soline .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  string(year(t1_due_date),"9999") + "-" + string(month(t1_due_date)) + "-" + string(day(t1_due_date)) .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_part .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_open .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_all .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_site  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_loc   .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = "'" +  t1_lot  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_oh  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_shp  .     
                    x_col = x_col + 1.
                    xworksheet:cells(x_row,x_col) = t1_qty_pk  .     
                    x_col = x_col + 1.            
                    xworksheet:cells(x_row,x_col) = if v_err3 = yes then "***" else ""   .     

            end. /*for each temp1*/
        end.  /*if ad_ctry <> "us"*/
    end. /*if avail ad_mstr*/


    /*设定前几行表格边框*/
    xworksheet:range("A":u + string(v_ii) + ":n":u + STRING(X_row)):borders:linestyle = 7 .
    xworksheet:range("A":u + string(v_ii) + ":n":u + STRING(X_row)):borders:colorindex = 1 .




    xworksheet:Columns:EntireColumn:AutoFit . 
    xworksheet:cells(1,1):select.

    xworksheet:PageSetup:LeftMargin      = xapplication:InchesToPoints(0.551181102362205).
    xworksheet:PageSetup:RightMargin     = xapplication:InchesToPoints(0).
    xworksheet:PageSetup:TopMargin       = xapplication:InchesToPoints(0.393700787401575).
    xworksheet:PageSetup:BottomMargin    = xapplication:InchesToPoints(0.393700787401575).
    xworksheet:PageSetup:HeaderMargin    = xapplication:InchesToPoints(0).
    xworksheet:PageSetup:FooterMargin    = xapplication:InchesToPoints(0.196850393700787).
    xworksheet:PageSetup:Orientation     = 2 . /*横向列印*/
    xworksheet:pagesetup:PrintTitleRows = "$1:$3" . /*页面标题行*/
    xworksheet:pagesetup:PrintTitleColumns = "" .  /*页面标题列*/
    xworksheet:pagesetup:CenterFooter = "第 &P 页，共 &N 页" . /*页脚*/
    /*xworksheet:PageSetup:zoom            = 90 . */
    /*xworksheet:pagesetup:PrintGridlines = True . 网格线*/


    xapplication:visible = true.   
    release object xworksheet.
    release object xworkbook.
    release object xapplication.

end. 
end procedure. /*printall*/


/*
do on error undo, return error on endkey undo, return error:



procedure checkall : 
do on error undo,leave on endkey undo, leave:
        
**因为.i 要用到mainloop,暂时没解决,代码挪到外部去了**

end. 
end procedure. checkall*/





